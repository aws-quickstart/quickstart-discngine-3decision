---
AWSTemplateFormatVersion: 2010-09-09
Description: "This template deploys the 3decision helm chart, as well as related helm and kubernetes resources. (qs-1s40771km)."
Metadata:
  cfn-lint: { config: { ignore_checks: [ E3001 ] } }
  QuickStartDocumentation:
    EntrypointName: "3decision Kubernetes and Helm Deployment"
  LintSpellExclude:
    - Discngine
    - 3decision
Parameters:
  TNamespace:
    Default: tdecision
    Type: String
  JWTSecretName:
    Default: 3decision-jwt-secret
    Type: String
  JWTPrivateKey:
    Type: String
    NoEcho: true
  JWTPublicKey:
    Type: String
  EKSClusterName:
    Type: String
  DBPassword:
    Type: String
    NoEcho: true
  DBConnectionString:
    Type: String
  DataPubVolumeID:
    Type: String
  ChoralVolumeID:
    Type: String
  DomainName:
    Type: String
  AzureTenant:
    Type: String
  AzureClientId:
    Type: String
  AzureSecret:
    Type: String
  AzureRedirectUri:
    Type: String
  OktaDomain:
    Type: String
  OktaServerId:
    Type: String
  OktaClientId:
    Type: String
  OktaSecret:
    Type: String
  OktaRedirectUrl:
    Type: String
Resources:
  TDecisionNamespace:
    Type: "AWSQS::Kubernetes::Resource"
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: 'kube-system'
      Manifest: !Sub |
        kind: Namespace
        apiVersion: v1
        metadata:
          name: ${TNamespace}
  CertManagerChart:
    Type: "AWSQS::Kubernetes::Helm"
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: cert-manager
      Namespace: cert-manager
      Repository: https://charts.jetstack.io
      Chart: cert-manager
      Version: 1.6.1
      Values:
        installCRDs: true
  RabbitMQChart:
    Type: "AWSQS::Kubernetes::Helm"
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: rabbitmq
      Namespace: rabbitmq
      Repository: https://charts.bitnami.com/bitnami
      Chart: rabbitmq
      Version: 6.27.1
      Values:
        image.tag: 3.8.19-debian-10-r30
        rabbitmq.username: discngine
        rabbitmq.password: lapin79
  JWTSecret:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: TDecisionNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: !Ref TNamespace
      Manifest: !Sub |
        kind: Secret
        apiVersion: v1
        type: opaque
        metadata:
          name: ${JWTSecretName}
          namespace: ${TNamespace}
        data:
          id_rsa: ${JWTPrivateKey}
          id_rsa.pub: ${JWTPublicKey}
  ChangeDBPass:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: TDecisionNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: !Ref TNamespace
      Manifest: !Sub |
        kind: Pod
        apiVersion: v1
        metadata:
          name: db-pass-change
        spec:
          restartPolicy: OnFailure
          containers:
          - name: db-pass-change
            image: fra.ocir.io/discngine1/3decision_kube/sqlcl
            command: ["/bin/bash", "-c"]
            args:
            - echo -ne '
              alter user ADMIN identified by "${DBPassword}";
              alter user PD_T1_DNG_THREEDECISION identified by "${DBPassword}";
              alter user PD_T1_DNG_CORE identified by "${DBPassword}";
              alter user CHEMBL_29 identified by "${DBPassword}";
              alter user CHORAL_OWNER identified by "${DBPassword}";' > changepwd.sql;
              /root/sqlcl/bin/sql admin/Ch4ng3m3f0rs3cur3p4ss@${DBConnectionString} @changepwd.sql
            resources:
              limits:
                cpu: 500m
                memory: 500Mi
              requests:
                cpu: 150m
                memory: 250Mi
  TdecisionChart:
    Type: "AWSQS::Kubernetes::Helm"
    DependsOn: [ JWTSecret, RabbitMQChart ]
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: tdecision
      Namespace: !Ref TNamespace
      Chart: oci://fra.ocir.io/discngine1/3decision_kube/3decision-helm:0.0.3-aws
      Values:
        ingress.host: !Ref DomainName
        nodeCloud.volumes.jwtSecret.name: !Ref JWTSecretName
        oracle.password: !Ref DBPassword
        oracle.connectionString: !Ref DBConnectionString
        volumes.claimPods.backend.publicdata.awsElasticBlockStore.volumeID: !Ref DataPubVolumeID
        volumes.claimPods.backend.publicdata.awsElasticBlockStore.fsType: ext4
        volumes.claimPods.backend.publicdata.awsElasticBlockStore.availabilityZone: !Select [ 2, Fn::GetAZs: !Ref 'AWS::Region' ]
        choral.oracle.password: !Ref DBPassword
        choral.oracle.connectionString: !Ref DBConnectionString
        choral.pv.awsElasticBlockStore.volumeID: !Ref ChoralVolumeID
        choral.pv.availabilityZone: !Select [ 1, Fn::GetAZs: !Ref 'AWS::Region' ]
        nest.env.internal_api_key.value: !Select [2, !Split ['/', !Ref AWS::StackId]]
        next.env.okta_domain.value: !Ref OktaDomain
        next.env.okta_server_id.value: !Ref OktaServerId
        next.env.okta_client_id.value: !Ref OktaClientId
        next.env.okta_secret.value: !Ref OktaSecret
        next.env.okta_redirect_uri.value: !Ref OktaRedirectUrl
        next.env.azure_tenant.value: !Ref AzureTenant
        next.env.azure_client_id.value: !Ref AzureClientId
        next.env.azure_secret.value: !Ref AzureSecret
        next.env.azure_redirect_uri.value: !Ref AzureRedirectUri