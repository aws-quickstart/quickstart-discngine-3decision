---
AWSTemplateFormatVersion: 2010-09-09
Description: "This template deploys the 3decision helm chart, as well as related helm and kubernetes resources. (qs-1s40771km)."
Metadata:
  cfn-lint: { config: { ignore_checks: [ E3001 ] } }
  QuickStartDocumentation:
    EntrypointName: "3decision Kubernetes and Helm Deployment"
  LintSpellExclude:
    - Discngine
    - 3decision
Parameters:
  TNamespace:
    Default: tdecision
    Type: String
  JWTSecretName:
    Default: 3decision-jwt-secret
    Type: String
  JWTPrivateKey:
    Type: String
    NoEcho: true
  JWTPublicKey:
    Type: String
  EKSClusterName:
    Type: String
  DBPassword:
    Type: String
    NoEcho: true
  DBConnectionString:
    Type: String
  CollectionVolumeID:
    Type: String
  DataVolumeID:
    Type: String
  EtlUser:
    Type: String
  EtlPassword:
    Type: String
    NoEcho: true
  DomainName:
    Type: String
  CertificateArn:
    Type: String
  TdecRecordName:
    Type: String
  EtlRecordName:
    Type: String
Mappings:
  Config:
    Prefix: { Value: 'eks-quickstart' }
Resources:
  TDecisionNamespace:
    Type: "AWSQS::Kubernetes::Resource"
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: 'kube-system'
      Manifest: !Sub |
        kind: Namespace
        apiVersion: v1
        metadata:
          name: ${TNamespace}
  RabbitMQChart:
    Type: "AWSQS::Kubernetes::Helm"
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: rabbitmq
      Namespace: rabbitmq
      Repository: https://charts.bitnami.com/bitnami
      Chart: rabbitmq
      Version: 6.27.1
      Values:
        image.tag: 3.8.19-debian-10-r30
        rabbitmq.username: discngine
        rabbitmq.password: lapin79
  JWTSecret:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: TDecisionNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: !Ref TNamespace
      Manifest: !Sub |
        kind: Secret
        apiVersion: v1
        type: opaque
        metadata:
          name: ${JWTSecretName}
          namespace: ${TNamespace}
        data:
          id_rsa: ${JWTPrivateKey}
          id_rsa.pub: ${JWTPublicKey}
  ChangeDBPass:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: TDecisionNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: !Ref TNamespace
      Manifest: !Sub |
        kind: Pod
        apiVersion: v1
        metadata:
          name: db-pass-change
        spec:
          restartPolicy: OnFailure
          containers:
          - name: db-pass-change
            image: fra.ocir.io/discngine1/3decision_kube/sqlcl
            command: ["/bin/bash", "-c"]
            args:
            - echo -ne '
              alter user ADMIN identified by "${DBPassword}";
              alter user PD_T1_DNG_THREEDECISION identified by "${DBPassword}";
              alter user PD_T1_DNG_CORE identified by "${DBPassword}";
              alter user CHEMBL_29 identified by "${DBPassword}";
              alter user CHORAL_OWNER identified by "${DBPassword}";' > changepwd.sql;
              /root/sqlcl/bin/sql admin/Ch4ng3m3f0rs3cur3p4ss@${DBConnectionString} @changepwd.sql
            resources:
              limits:
                cpu: 500m
                memory: 500Mi
              requests:
                cpu: 150m
                memory: 250Mi
  TdecisionChart:
    Type: "AWSQS::Kubernetes::Helm"
    DependsOn: [ JWTSecret, RabbitMQChart ]
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: tdecision
      Namespace: !Ref TNamespace
      Chart: oci://fra.ocir.io/discngine1/3decision_kube/3decision-aws:latest
      Values:
        nodeCloud.volumes.jwtSecret.name: !Ref JWTSecretName
        oracle.password: !Ref DBPassword
        oracle.connectionString: !Ref DBConnectionString
        etl.volumes.data3dec.awsElasticBlockStore.volumeID: !Ref DataVolumeID
        etl.volumes.collection.awsElasticBlockStore.volumeID: !Ref CollectionVolumeID
        etl.user: !Ref EtlUser
        etl.password: !Ref EtlPassword
        volumes.availabilityZone: !Select [ 0, Fn::GetAZs: !Ref 'AWS::Region' ]
        ingress.host: !Ref DomainName
        ingress.certificateArn: !Ref CertificateArn
        ingress.node.host: !Ref TdecRecordName
        ingress.etl.host: !Ref EtlRecordName
  ChoralChart:
    Type: "AWSQS::Kubernetes::Helm"
    DependsOn: ChangeDBPass
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: choral
      Namespace: choral
      Chart: oci://fra.ocir.io/discngine1/3decision_kube/choral-helm:latest
      Values:
        oracle.password: !Ref DBPassword
        oracle.connectionString: !Ref DBConnectionString
  CreateIndexes:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: ChoralChart
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: choral
      Manifest: !Sub |
        kind: Pod
        apiVersion: v1
        metadata:
          name: index-change
        spec:
          restartPolicy: OnFailure
          containers:
          - name: index-change
            image: fra.ocir.io/discngine1/3decision_kube/sqlcl
            command: ["/bin/bash", "-c"]
            args:
            - echo -ne '
              WHENEVER SQLERROR EXIT SQL.SQLCODE;\n
              CREATE INDEX IDX_CHOR_STR_SMALL_MOL_SMILES ON STRUCTURE_SMALL_MOL(SMILES) INDEXTYPE IS CHORAL_OWNER.STRICT_IDXTYPE;\n
              CREATE INDEX IDX_CHOR_TAU_SMALL_MOL_SMILES ON STRUCTURE_SMALL_MOL(SMILES) INDEXTYPE IS CHORAL_OWNER.TAUTOMER_IDXTYPE;\n
              CREATE INDEX IDX_CHOR_TAUISO_SMS ON STRUCTURE_SMALL_MOL(SMILES) INDEXTYPE IS CHORAL_OWNER.TAUTOMER_ISOMER_IDXTYPE;\n
              CREATE INDEX IDX_CHOR_STRISO_SMS ON STRUCTURE_SMALL_MOL(SMILES) INDEXTYPE IS CHORAL_OWNER.STRICT_ISOMER_IDXTYPE;\n' > pd_t1_index.sql;
              exit | /root/sqlcl/bin/sql PD_T1_DNG_THREEDECISION/${DBPassword}@${DBConnectionString} @pd_t1_index.sql;
              ret=$?;
              if [ $ret -ne 0 ]; then
                echo -ne '
                DROP INDEX IDX_CHOR_STR_SMALL_MOL_SMILES;\n
                DROP INDEX IDX_CHOR_TAU_SMALL_MOL_SMILES;\n
                DROP INDEX IDX_CHOR_TAUISO_SMS;\n
                DROP INDEX IDX_CHOR_STRISO_SMS;\n' > delete_pd_t1_index.sql;
                exit | /root/sqlcl/bin/sql PD_T1_DNG_THREEDECISION/${DBPassword}@${DBConnectionString} @delete_pd_t1_index.sql;        
              exit 1;
              fi;
              echo -ne '
              WHENEVER SQLERROR EXIT SQL.SQLCODE;\n
              CREATE INDEX IDX_CHOR_STR_CMP_STRUC ON COMPOUND_STRUCTURES(CANONICAL_SMILES) INDEXTYPE IS CHORAL_OWNER.STRICT_IDXTYPE;\n
              CREATE INDEX IDX_CHOR_TAU_CMP_STRUC ON COMPOUND_STRUCTURES(CANONICAL_SMILES) INDEXTYPE IS CHORAL_OWNER.TAUTOMER_IDXTYPE;\n
              CREATE INDEX IDX_CHOR_TAUISO_CMP_STRUC ON COMPOUND_STRUCTURES(CANONICAL_SMILES) INDEXTYPE IS CHORAL_OWNER.TAUTOMER_ISOMER_IDXTYPE;\n
              CREATE INDEX IDX_CHOR_STRICT_CMP_STRUC ON COMPOUND_STRUCTURES(CANONICAL_SMILES) INDEXTYPE IS CHORAL_OWNER.STRICT_ISOMER_IDXTYPE;\n' > chembl_29_index.sql;
              exit | /root/sqlcl/bin/sql CHEMBL_29/${DBPassword}@${DBConnectionString} @chembl_29_index.sql;
              ret=$?;
              if [ $ret -ne 0 ]; then
                echo -ne '
                DROP INDEX IDX_CHOR_STR_CMP_STRUC;\n
                DROP INDEX IDX_CHOR_TAU_CMP_STRUC;\n
                DROP INDEX IDX_CHOR_TAUISO_CMP_STRUC;\n
                DROP INDEX IDX_CHOR_STRICT_CMP_STRUC;\n' > delete_chembl_29_index.sql;
                exit | /root/sqlcl/bin/sql PD_T1_DNG_THREEDECISION/${DBPassword}@${DBConnectionString} @delete_chembl_29_index.sql;        
                exit 1;
              fi;
            resources:
              limits:
                cpu: 500m
                memory: 500Mi
              requests:
                cpu: 150m
                memory: 250Mi